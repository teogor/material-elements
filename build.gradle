buildscript {
    ext.kotlinVersion = '1.3.50'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }
}

ext {
    compileSdkVersion = 30
    buildToolsVersion = '30.0.1'
    minSdkVersion = 21
    targetSdkVersion = 28

    androidXVersions = [
            annotation            : '1.0.1',
            appCompat             : '1.1.0',
            cardView              : '1.0.0',
            constraintlayout      : '1.1.3',
            coordinatorlayout     : '1.1.0',
            core                  : '1.2.0',
            experimental          : '1.0.0',
            fragment              : '1.0.0',
            lifecycle             : '2.0.0',
            recyclerView          : '1.0.0',
            recyclerViewSelection : '1.0.0',
            transition            : '1.2.0',
            vectorDrawable        : '1.1.0',
            viewpager2            : '1.0.0',
    ]

    testRunnerVersion = '1.1.0'
    espressoVersion = '3.1.0'
    mockitoCoreVersion = '2.25.0'
    truthVersion = '0.45'

    // Enforce the use of prebuilt dependencies in all sub-projects. This is
    // required for the doclava dependency.
    usePrebuilts = "true"

    // Disable pre-dexing when gradle called with -PdisablePreDex;
    preDexLibs = !project.hasProperty('disablePreDex')

    mavenRepoUrl = (project.hasProperty('mavenRepoUrl')
            ? project.property('mavenRepoUrl') : '/tmp/myRepo/')

    // Current version of the library (could be in-development/unreleased).
    mdcLibraryVersion = '1.2.0'
    mdcLibraryPackage = "com.google.android.material"
    mdcLibraryDir = "com/google/android/material"
}

// lint every library
task lint {
    doLast {
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

String[] disabledLints = [
        'CustomViewStyleable',
        'CutPasteId',
        'GifUsage',
        'GradleDependency',
        'GradleOverrides',
        'IconDuplicates',
        'IconLauncherShape',
        'InflateParams',
        'MergeRootFrame',
        'MissingClass',
        'PrivateResource',
        'PxUsage',
        'RestrictedApi',
        'StringFormatMatches',
        'SupportAnnotationUsage',
        'SwitchIntDef',
        'UnusedAttribute',
        'UnusedResources',
        'VectorDrawableCompat',
        'VectorRaster',
        'WrongConstant',
]

private def getTransformedProjectPath(projectPath) {
    def pathComponents = projectPath.tokenize('/')
    def result = ''
    def currentPath = ''
    pathComponents.each { component ->
        if (currentPath == '') {
            currentPath += component
        } else {
            currentPath += '-' + component
        }
        result += ':' + currentPath
    }
    return result
}

/**
 * Return the module dependency for the given compatibility library name.
 */
def compatibility(name) {
    switch (name) {
        case "annotation":
            return "androidx.annotation:annotation:${androidXVersions.annotation}"
        case "appcompat":
            return "androidx.appcompat:appcompat:${androidXVersions.appCompat}"
        case "cardview":
            return "androidx.cardview:cardview:${androidXVersions.cardView}"
        case "constraintlayout":
            return "androidx.constraintlayout:constraintlayout:${androidXVersions.constraintlayout}"
        case "coordinatorlayout":
            return "androidx.coordinatorlayout:coordinatorlayout:${androidXVersions.coordinatorlayout}"
        case "core":
            return "androidx.core:core:${androidXVersions.core}"
        case "fragment":
            return "androidx.fragment:fragment:${androidXVersions.fragment}"
        case "lifecycleRuntime":
            return "androidx.lifecycle:lifecycle-runtime:${androidXVersions.lifecycle}"
        case "recyclerview":
            return "androidx.recyclerview:recyclerview:${androidXVersions.recyclerView}"
        case "transition":
            return "androidx.transition:transition:${androidXVersions.transition}"
        case "vectordrawable":
            return "androidx.vectordrawable:vectordrawable:${androidXVersions.vectorDrawable}"
        case "recyclerViewSelection":
            return "androidx.recyclerview:recyclerview-selection:${androidXVersions.recyclerViewSelection}"
        case "viewpager2":
            return "androidx.viewpager2:viewpager2:${androidXVersions.viewpager2}"
        case "experimental":
            return "androidx.annotation:annotation-experimental:${androidXVersions.experimental}"
        default:
            throw new IllegalArgumentException("No mapping exists for name: $name.")
    }
}

/**
 * Return the project dependency for the given project path.
 */
def fromPath(path) {
    return getTransformedProjectPath(path)
}

def getArchivesBaseName(name) {
    if (name == 'lib') {
        return 'material'
    }
    def pathComponents = name.tokenize('-')
    def knownComponents = ['lib', 'java', 'com', 'google', 'android', 'material']
    def firstUnknownComponent = knownComponents.size();
    for (def i = 0; i < knownComponents.size() && i < pathComponents.size(); i++) {
        if (pathComponents[i] != knownComponents[i]) {
            firstUnknownComponent = i;
            break;
        }
    }
    def result = 'material'
    for (def i = firstUnknownComponent; i < pathComponents.size(); i++) {
        result = result + '-' + pathComponents[i];
    }
    return result;
}
